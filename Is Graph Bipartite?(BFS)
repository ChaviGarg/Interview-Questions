class Solution {
    public boolean isBipartite(int[][] graph) {
        
        int colour[] = new int[graph.length];
        boolean visited[] = new boolean[graph.length];
        Arrays.fill(colour, -1);
        
        Map<Integer, List<Integer>> adjMap = new HashMap<>();
        
        for(int i=0; i < graph.length; i++){
            adjMap.put(i, new ArrayList<>());
        }
        int index = 0;
        for(int edge[] : graph){
            for(int i=0; i<edge.length; i++){
                adjMap.get(index).add(edge[i]);
            }
            index++;
        }
        for(int i : adjMap.keySet()){
            
            if(! visited[i]){
               boolean isBipartite = checkBipartite(adjMap, visited, colour, i);
               if(! isBipartite) 
                   return false;
            }    
        }
       
        return true;
    }
    boolean checkBipartite(Map<Integer, List<Integer>> adjMap, boolean visited[], int colour[], int x){
        
        Queue<Integer> q = new LinkedList<>();
        
        q.offer(x);
        colour[x] = 1;
       
        while(! q.isEmpty()){
            int n = q.poll();
            visited[n] = true;
            List<Integer> neighbours = adjMap.get(n);
            for(int neighbour : neighbours){
                if(colour[neighbour] == -1)
                    colour[neighbour] = Math.abs(colour[n] - 1);
                else if(colour[neighbour] != -1 && colour[neighbour] == colour[n])
                    return false;
                if(! visited[neighbour]){
                   q.offer(neighbour);
                   visited[neighbour] = true; 
                }    
            }
        }
       return true; 
    }
}  // Time Complexity -> O( V + E)
