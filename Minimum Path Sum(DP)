class Solution {
    public int minPathSum(int[][] grid) {
        if(grid == null || grid.length == 0)
            return 0;
        int r = grid.length;
        int c = grid[0].length;
        int[][] dp = new int[r][c];
        
        dp[0][0] = grid[0][0];
        
        for(int j=1; j < grid[0].length; j++){
            dp[0][j] = grid[0][j] + dp[0][j-1];
        }
        for(int i=1; i < grid.length; i++){
            dp[i][0] = grid[i][0] + dp[i-1][0]; 
        }
        for(int i=1; i < grid.length; i++){
            for(int j=1; j < grid[0].length; j++){
                  dp[i][j] = grid[i][j] + Math.min(dp[i-1][j],dp[i][j-1]);
            }
        } 
       
      return dp[r-1][c-1];
    }
   
} 

// Time Complexity : O(n*n)
// Space Complexity : O(n*n)
