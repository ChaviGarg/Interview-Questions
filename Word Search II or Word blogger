class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        
        Set<String> result = new HashSet<>();
        
        for(String word : words){
            boolean[][] visited = new boolean[board.length][board[0].length];
            for(int i=0; i < board.length; i++){
                for(int j=0; j < board[0].length; j++){
                    if(word.charAt(0) == board[i][j] && dfs(board, word, i, j, visited, 0)){
                       result.add(word);  
                    }    
                }
            }
        }
       return new ArrayList(result); 
    }
    private boolean dfs(char[][] board, String word, int x, int y, boolean[][] visited, int index){
        
        if(index == word.length())
            return true;
        
        if(x < 0 || y < 0 || x >= board.length || y >= board[0].length || visited[x][y] || word.charAt(index) != board[x][y])
            return false;
        
        visited[x][y] = true;
        
        if(dfs(board, word, x+1, y, visited, index+1)||
          dfs(board, word, x, y+1, visited, index+1)||
          dfs(board, word, x-1, y, visited, index+1)||
          dfs(board, word, x, y-1, visited, index+1))
            return true;
        
        visited[x][y] = false;
        
        return false;
          
    }
}
// Time complexity : O(rows) * O(columns) * O(dict length)
// Space complexity :  O(rows) * O(columns) * O(dict length)
