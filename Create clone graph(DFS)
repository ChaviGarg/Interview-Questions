class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        
        if(node == null)
            return null;
       
        Map<Node, Node> map = new HashMap<>();
        dfs(node, map);
      
       return map.get(node); 
    }
    private void dfs(Node node, Map<Node, Node> map){
        if(node == null)
            return;
        Node copy = null;
        if(! map.containsKey(node)){
            copy = new Node(node.val);
            map.put(node, copy);
        }    
        else
            copy = map.get(node);
       
        if(node.neighbors != null){
            for(Node neighbor : node.neighbors){
                if(! map.containsKey(neighbor)){
                    map.put(neighbor, new Node(neighbor.val));
                    dfs(neighbor, map);
                }
                 copy.neighbors.add(map.get(neighbor));   
            }
        }
        
    }

}
