class Solution {
    public int maxDistance(int[][] grid) {
        
        if(grid.length == 0 || grid[0].length == 0)
            return 0;
        
        Queue<int[]> q = new LinkedList<>();
        int directions[][] = new int[][]{{-1,0},{1,0},{0,-1},{0,1}};
        
        for(int i=0; i < grid.length; i++){
            for(int j=0; j < grid[0].length; j++){
                if(grid[i][j] == 1){
                    q.offer(new int[]{i,j});
                }    
            }
        }
        int level = -1;
        while(! q.isEmpty()){
            int size = q.size();
            for(int i=0; i < size; i++){
                int curr[] = q.poll();
                for(int dir[] : directions){
                    int x = curr[0] + dir[0];
                    int y = curr[1] + dir[1];
                    if(x >= 0 && y >= 0 && x < grid.length && y < grid[0].length && grid[x][y] == 0){
                        grid[x][y] = 1;
                        q.offer(new int[]{x,y});
                    }
                }
            }
            level++;
        }
        
        return level <= 0 ? -1 : level; 
        
    }
}
