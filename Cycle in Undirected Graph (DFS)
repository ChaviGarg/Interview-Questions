public class Solution {
    static boolean visited[];
    public int solve(int A, int[][] B) {
        
        Map<Integer, List<Integer>> adjMap = new HashMap<>();
        
        for(int i=1; i<= A; i++){
            adjMap.put(i, new ArrayList<>());
        }
        for(int arr[] : B){
            adjMap.get(arr[0]).add(arr[1]);
            adjMap.get(arr[1]).add(arr[0]);
        }
        for(int i=1; i<= A; i++){
            visited = new boolean[A+1];
            int isCycle = dfs(adjMap, i, -1);
            if(isCycle == 1)
               return 1;
        }
        return 0;   
    }
    private static int dfs(Map<Integer, List<Integer>> adjMap, int x, int parent){
        if(visited[x])
          return 1;
        visited[x] = true;
        List<Integer> neighbours = adjMap.get(x);
        if(neighbours == null){
            visited[x] = false;
            return 0;
        }
        for(int i : neighbours){
            if(i == parent)
               continue;
            int isCycle = dfs(adjMap, i, x);
            if(isCycle == 1)
               return 1;
        }       
        visited[x] = false;
        return 0;
    }
}
