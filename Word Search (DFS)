class Solution {
    public boolean exist(char[][] board, String word) {
        
        boolean visited[][] = new boolean[board.length][board[0].length];
        for(int i=0; i < board.length; i++){
            for(int j=0; j < board[0].length; j++){
                if(board[i][j] == word.charAt(0) && dfs(board, i, j, 0, word, visited)){
                         return true;
                }     
            }
        }
       return false; 
    }
    
    private boolean dfs(char[][] board, int x, int y, int index, String word, boolean[][] visited){
        
        if(index == word.length())
            return true;
        
        if(x < 0 || y < 0 || x >= board.length || y >= board[0].length || visited[x][y] || word.charAt(index) != board[x][y])
            return false;
        
         visited[x][y] = true;
            
        
         if(dfs(board, x+1, y, index+1, word, visited)||
            dfs(board, x, y+1, index+1, word, visited)||
            dfs(board, x-1, y, index+1, word, visited)||
            dfs(board, x, y-1, index+1, word, visited))
             
               return true;
        
        
        visited[x][y] = false;
        return false;
    
    }
}
// Time Complexity : O(row * col)
// Space Complexity : O(row * col)
