class Solution {

    public int maxAreaOfIsland(int[][] grid) {
        
        int max_sum = Integer.MIN_VALUE;
        
        for(int i=0; i < grid.length; i++){
            for(int j=0; j < grid[0].length; j++){
                if(grid[i][j] == 1){
                    int sum = bfs(grid, i, j);
                    max_sum = Math.max(max_sum, sum);
                }
            }
        }
        return max_sum == Integer.MIN_VALUE ? 0 : max_sum;
    }
    private int bfs(int grid[][], int i, int j){
        
        int sum = 1;
        
        Queue<int[]> q = new LinkedList<>();
        int directions[][] = new int[][]{{1,0},{0,1},{-1,0},{0,-1}};
        q.offer(new int[]{i,j});
        grid[i][j] = 0;
        
        while(! q.isEmpty()){
            int curr[] = q.poll();
            for(int dir[] : directions){
                int x = curr[0] + dir[0];
                int y = curr[1] + dir[1];
                if(x >= 0 && y >= 0 && x < grid.length && y < grid[0].length && grid[x][y] == 1){
                    grid[x][y] = 0;
                    sum++;
                    q.offer(new int[]{x,y});
                }
            }
        }
        return sum;
    }
}
// for both DFS and BFS
// Time complexity : O(row * col)
// Space complexity : O(row * col)
