class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        
        if(node == null)
            return null;
        Queue<Node> q = new LinkedList<>();
        q.offer(node);
        Map<Node, Node> map = new HashMap<>();
        map.put(node, new Node(node.val));
        
        while(! q.isEmpty()){
            Node original = q.poll();
            Node clone = map.get(original);
            if(original.neighbors != null){
                for(Node n : original.neighbors){
                    Node copy = map.get(n);
                    if(copy == null){
                        q.offer(n);
                        copy = new Node(n.val);
                        map.put(n,copy);
                    }
                  clone.neighbors.add(copy);  
                }
            }
        }
       return map.get(node); 
    }
}
