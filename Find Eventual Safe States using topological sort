class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        
        Map<Integer, List<Integer>> adjMap = new HashMap<>();
        boolean visited[] = new boolean[graph.length];
        int outdegree[] = new int[graph.length];
        List<Integer> result = new ArrayList<>();
        
        for(int i=0; i < graph.length; i++){
            adjMap.put(i, new ArrayList<>());
        }
        
        int index = 0;
        for(int edge[] : graph){ 
            for(int i=0; i< edge.length; i++){
               adjMap.get(edge[i]).add(index); 
               outdegree[index]++; 
            }    
            index++;
        }  // Making reverse adj list
        Queue<Integer> q = new LinkedList<>();
        for(int i=0; i < graph.length; i++){
            if(outdegree[i] == 0){
                q.offer(i);
                result.add(i);
            }
        }
        topologicalSort(adjMap, q, outdegree, result);
        Collections.sort(result);
        return result;
    }
    private void topologicalSort( Map<Integer, List<Integer>> adjMap, Queue<Integer> q, int outdegree[], List<Integer> result){
        
        while(! q.isEmpty()){
            int n = q.poll();
            List<Integer> neighbours = adjMap.get(n);
            if(neighbours != null){
                for(int neighbour : neighbours){
                    outdegree[neighbour]--;
                    if(outdegree[neighbour] == 0){
                        result.add(neighbour);
                        q.offer(neighbour);
                    }    
                }
            }
        }
    }
}
