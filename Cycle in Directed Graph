public class Solution {
    static boolean visited[];
    public int solve(int A, int[][] B) {
        
        Map<Integer, List<Integer>> adjMap = new HashMap<>();
        for(int i=1; i <= A; i++)
               adjMap.put(i, new ArrayList<>());
        for(int t[] : B){
            adjMap.get(t[0]).add(t[1]);
        } 
        for(int i=1; i<=A; i++){
            visited = new boolean[A+1];
            int isCycle = dfs(adjMap, i);
            if(isCycle == 1)
              return 1;
        }
        return 0;
    }
    private int dfs( Map<Integer, List<Integer>> adjMap,int  x){
        
        if(visited[x])
           return 1;
        visited[x] = true;
        List<Integer> neighbours = adjMap.get(x);
        if(neighbours == null){
            visited[x] = false;
            return 0;
        }
        for(int i : neighbours){
            int isCycle = dfs(adjMap, i);
            if(isCycle == 1)
              return 1;
        }
        visited[x] = false;
        return 0;
    }
}
