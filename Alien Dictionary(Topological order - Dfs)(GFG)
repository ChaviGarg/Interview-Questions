// { Driver Code Starts
/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;
import java.math.*;

class GFG {
	public static void main (String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int t = Integer.parseInt(sc.next());
		while(t-- > 0)
		{
		    int n = Integer.parseInt(sc.next());
		    int k = Integer.parseInt(sc.next());
		    
		    String[] words = new String[n];
		    
		    for(int i=0;i<n;i++)
		    {
		        words[i] = sc.next();
		    }
		    
		    Solution T = new Solution();
		  //  System.out.println(T.findOrder(words,k));
		    String order = T.findOrder(words,n,k);
		    
		    String temp[] = new String[n];
		    for(int i=0;i<n;i++)
		        temp[i] = words[i];
		    
		    Arrays.sort(temp, new Comparator<String>(){
		    
		      @Override
                public int compare(String a, String b) {
                    int index1 = 0;
                    int index2 = 0;
                    for(int i = 0; i < Math.min(a.length(), b.length()) 
                                        && index1 == index2; i++) {
                        index1 = order.indexOf(a.charAt(i));
                        index2 = order.indexOf(b.charAt(i));
                    }
                
                    if(index1 == index2 && a.length() != b.length()) 
                    {
                        if(a.length() < b.length())
                            return 1;
                        else
                            return 0;
                    }
                
                    if(index1 < index2)
                        return 1;
                    else
                        return 0;
                        
                }
		    });
		    
		    int flag = 1;
		    for(int i=0;i<n;i++)
		    {
		        if(!words[i].equals(temp[i]))
	            {
	                flag = 0;
	                break;
	            }
		    }
		    
		    System.out.println(flag);
		}
	}
	
}
// } Driver Code Ends


//User function Template for Java

/*
dict : array of strings denoting the words in a lien langauge
N : Size of the dictionary
K : Number of characters
*/
class Solution
{
    public String findOrder(String [] dict, int N, int K)
    {
        // Write your code here
        HashMap<Character, List<Character>> adjMap = new HashMap<>();
        String result = "";
        
        for(int i=0; i < K; i++){
            adjMap.put((char)(i+48), new ArrayList<>());
        }
        for(int i=0; i < dict.length-1; i++){
            String word1 = dict[i];
            String word2 = dict[i+1];
            int l=0;
            if(word1.length() < word2.length())
                l = word1.length();
            else
                l = word2.length();
            
            int count = 1;
            for(int j=0; j < l; j++){
                char c1 = word1.charAt(j);
                char c2 = word2.charAt(j);
                if(c1 != c2 && count == 1){
                    if(adjMap.containsKey(c1))
                       adjMap.get(c1).add(c2);
                    count++;
                    if(count > 1)
                       break;
                }
                if(count > 1)
                   break;
            }    
        }
       
        Stack<Character> stack = new Stack<>();
        boolean visited[] = new boolean[K];
        
        for(int i=0; i < K; i++){
            topologicalSort((char)(i+48), adjMap, visited, stack);
        }
        while(! stack.isEmpty()){
            result += stack.pop();
        }
        
        return result;
    }
    private void topologicalSort( char x, HashMap<Character, List<Character>> adjMap, boolean visited[], Stack<Character> stack){
        
        visited[x-'0'] = true;
        
        List<Character> neighbors = adjMap.get(x);
        
        if(neighbors != null){
            for(char c : neighbors){
                if(! visited[c-'0']){
                    topologicalSort(c, adjMap, visited, stack);
                    if(! stack.contains(c))
                           stack.push(c);
                }
            }
            
        }
        if(! stack.contains(x))
           stack.push(x);
      
    }
}
