class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
        
        double dist[][] = new double[N+1][N+1];
        
        for(double d[] : dist){
            Arrays.fill(d, Double.POSITIVE_INFINITY);
        }
        
        for(int i=1; i <= N; i++){
            dist[i][i] = 0;
        }
        for(int t[] : times){
            dist[t[0]][t[1]] = t[2];
        }
        
        for(int k=1; k <= N; k++){
            for(int i=1; i <= N; i++){
                for(int j=1; j <= N; j++){
                    if(dist[i][k] + dist[k][j] < dist[i][j])
                        dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
        double max = Double.MIN_VALUE;
        for(int i=1; i <= N; i++){
           if(dist[K][i] == Double.POSITIVE_INFINITY) return -1;
           max = Math.max(max, dist[K][i]);
        }
        
        return (int)max;
    }
}    
