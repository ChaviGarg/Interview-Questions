public class Solution {
    static boolean visited[];
    public int solve(int A, int[][] B) {
        
        Map<Integer, List<Integer>> adjMap = new HashMap<>();
        
        for(int i=1; i<= A; i++){
            adjMap.put(i, new ArrayList<>());
        }
        for(int arr[] : B){
            adjMap.get(arr[0]).add(arr[1]);
            adjMap.get(arr[1]).add(arr[0]);
        }
        if(isCyclicDisconnected(adjMap, A))
            return 1;
        return 0;   
    }
    private static boolean isCyclicConnected(Map<Integer, List<Integer>> adjMap, int x, int A, boolean visited[]){
       
       Queue<Integer> q = new LinkedList<>();
       int parent[] = new int[A+1];
       Arrays.fill(parent, -1); 
       q.offer(x);
       visited[x] = true;
       
       while(! q.isEmpty()){
           int u = q.poll();
           List<Integer> neighbours = adjMap.get(u);
           for(int v : neighbours){
               if(! visited[v]){
                  visited[v] = true;
                  q.offer(v);
                  parent[v] = u;
               }
              else if(parent[u] != v)
                 return true;
           }      
       }
       
      return false;
    }
    private static boolean isCyclicDisconnected(Map<Integer, List<Integer>> adjMap, int A){
        
        boolean visited[] = new boolean[A+1];
        
        for(int i=1; i<=A; i++){
            if(! visited[i] && isCyclicConnected(adjMap, i,  A, visited))
               return true;
        }
        return false;
        
    }
}
