class Solution {

    public List<Integer> eventualSafeNodes(int[][] graph) {
    
        int visited[] = new int[graph.length];
        List<Integer> result = new ArrayList<>();
    
        for(int i=0; i < graph.length; i++){
            if(isSafe(graph, i, visited)){
                result.add(i);
            }
        }
        return result;
    }
    private boolean isSafe(int[][] graph, int x, int visited[]){
       
        if(visited[x] == 2)
            return true;
        
        if(visited[x] == 1)
            return false;
        
        visited[x] = 1;
        
        int[] neighbours = graph[x];
        
        for(int i=0; i < neighbours.length; i++){
            if(! isSafe(graph, neighbours[i], visited))
                return false;
        }
        visited[x] = 2;
        return true;
    }
}
